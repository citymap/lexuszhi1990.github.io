<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>付凌志的博客</title>
  
  <subtitle>Don&#39;t worry, be happy</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fulingzhi.com/"/>
  <updated>2018-11-02T03:21:26.989Z</updated>
  <id>http://fulingzhi.com/</id>
  
  <author>
    <name>David Fu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>setup-k8s-on-ubuntu</title>
    <link href="http://fulingzhi.com/2018/10/23/2018-11-2-setup-k8s-on-ubuntu/"/>
    <id>http://fulingzhi.com/2018/10/23/2018-11-2-setup-k8s-on-ubuntu/</id>
    <published>2018-10-23T06:29:01.000Z</published>
    <updated>2018-11-02T03:21:26.989Z</updated>
    
    <content type="html"><![CDATA[<p>当前深度学习模型训练中，还往往采用的是单机多卡的方式，如果主机较多的情况下，每个人单独使用固定的一台或几台服务器，GPU利用率不高，而且，训练需要较大的 batch size(如 densenet)，或者需要在短时间内训练完成，则单机多卡有可能不满足需求。<br>基于kubernetes搭建训练分布式平台，对训练任务容器化，并支持GPU的自动调度。<br><a id="more"></a></p><h3 id="当前部署环境"><a href="#当前部署环境" class="headerlink" title="当前部署环境"></a>当前部署环境</h3><p>系统版本，ubuntu 16.04:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ uname -a</span><br><span class="line">Linux dt-node1 4.15.0-36-generic #39~16.04.1-Ubuntu SMP Tue Sep 25 08:59:23 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure></p><p><img src="/assets/img/ubuntu-info.png" alt=""></p><p>docker 版本:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:           18.06.1-ce</span><br><span class="line"> API version:       1.38</span><br><span class="line"> Go version:        go1.10.3</span><br><span class="line"> Git commit:        e68fc7a</span><br><span class="line"> Built:             Tue Aug 21 17:24:56 2018</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      false</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          18.06.1-ce</span><br><span class="line">  API version:      1.38 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.10.3</span><br><span class="line">  Git commit:       e68fc7a</span><br><span class="line">  Built:            Tue Aug 21 17:23:21 2018</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br></pre></td></tr></table></figure></p><h3 id="disable-firewall"><a href="#disable-firewall" class="headerlink" title="disable firewall"></a>disable firewall</h3><p><code>systemctl disable firewalld &amp;&amp; systemctl stop firewalld</code></p><h3 id="install-bridge"><a href="#install-bridge" class="headerlink" title="install bridge"></a>install bridge</h3><p><code>sudo apt-get install bridge-utils</code></p><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-cache madison docker-ce</span><br><span class="line">sudo apt-get install docker-ce=18.06.1~ce~3-0~ubuntu</span><br></pre></td></tr></table></figure><h3 id="安装kubernetes准备工作"><a href="#安装kubernetes准备工作" class="headerlink" title="安装kubernetes准备工作"></a>安装kubernetes准备工作</h3><p>这里我们采用kubeadm安装k8s，按照<a href="https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/" target="_blank" rel="noopener">官方文档</a>即可。唯一需要注意的是k8s默认的image需要手动安装。</p><h4 id="安装kubeadm-kubelet-kubectl"><a href="#安装kubeadm-kubelet-kubectl" class="headerlink" title="安装kubeadm kubelet kubectl"></a>安装kubeadm kubelet kubectl</h4><p>这个也是安装<a href="https://kubernetes.io/docs/setup/independent/install-kubeadm/#check-required-ports" target="_blank" rel="noopener">官方文档</a>即可。这里采用了阿里云的source。直接执行下段命令需要<code>sudo -i</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get install -y apt-transport-https</span><br><span class="line">curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -</span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/apt/sources.list.d/kubernetes.list</span><br><span class="line">deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span><br><span class="line">EOF</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install -y kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure><p>当前安装的kubeadm版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubeadm version</span><br><span class="line">kubeadm version: &amp;version.Info&#123;Major:&quot;1&quot;, Minor:&quot;12&quot;, GitVersion:&quot;v1.12.1&quot;, GitCommit:&quot;4ed3216f3ec431b140b1d899130a69fc671678f4</span><br><span class="line">&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2018-10-05T16:43:08Z&quot;, GoVersion:&quot;go1.10.4&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux/amd64&quot;&#125;</span><br></pre></td></tr></table></figure></p><h4 id="安装-k8s-1-12-1-需要的image"><a href="#安装-k8s-1-12-1-需要的image" class="headerlink" title="安装 k8s 1.12.1 需要的image"></a>安装 k8s 1.12.1 需要的image</h4><p>list the basic images used by k8s 1.12.1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ kubeadm config images list --kubernetes-version=v1.12.1</span><br><span class="line">k8s.gcr.io/kube-apiserver:v1.12.1</span><br><span class="line">k8s.gcr.io/kube-controller-manager:v1.12.1</span><br><span class="line">k8s.gcr.io/kube-scheduler:v1.12.1</span><br><span class="line">k8s.gcr.io/kube-proxy:v1.12.1</span><br><span class="line">k8s.gcr.io/pause:3.1</span><br><span class="line">k8s.gcr.io/etcd:3.2.24</span><br><span class="line">k8s.gcr.io/coredns:1.2.2</span><br></pre></td></tr></table></figure></p><p>pull from aliyun and tag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.12.1</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.12.1</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.12.1</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.12.1</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.2.24</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.2.2</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1</span><br><span class="line"></span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.12.1 k8s.gcr.io/kube-proxy:v1.12.1</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.12.1 k8s.gcr.io/kube-apiserver:v1.12.1</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.12.1 k8s.gcr.io/kube-controller-manager:v1.12.1</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.12.1 k8s.gcr.io/kube-scheduler:v1.12.1</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.2.24 k8s.gcr.io/etcd:3.2.24</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.2.2 k8s.gcr.io/coredns:1.2.2</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 k8s.gcr.io/pause:3.1</span><br></pre></td></tr></table></figure></p><h3 id="安装kubernetes"><a href="#安装kubernetes" class="headerlink" title="安装kubernetes"></a>安装kubernetes</h3><h4 id="install-k8s-by-kubeadm"><a href="#install-k8s-by-kubeadm" class="headerlink" title="install k8s by kubeadm"></a>install k8s by kubeadm</h4><p>cmd:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --kubernetes-version=v1.12.1 --pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure></p><p>outputs:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Your Kubernetes master has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">You can now join any number of machines by running the following on each node</span><br><span class="line">as root:</span><br><span class="line"></span><br><span class="line">  kubeadm join 10.196.50.212:6443 --token qvye1k.iyd56f8kv5n7mgbx --discovery-token-ca-cert-hash sha256:cf2a7146a553384bcba8f33e43920034c67ed22056b7a3a7fa822610e3420659</span><br></pre></td></tr></table></figure></p><h4 id="Installing-a-pod-network-add-on"><a href="#Installing-a-pod-network-add-on" class="headerlink" title="Installing a pod network add-on"></a>Installing a pod network add-on</h4><p>这里采用<code>flannel</code>作为内网网络的插件：<br>Set <code>/proc/sys/net/bridge/bridge-nf-call-iptables</code> to 1 by running <code>sysctl net.bridge.bridge-nf-call-iptables=1</code> to pass bridged IPv4 traffic to iptables’ chains.</p><p>then install <code>flannel</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/bc79dd1505b0c8681ece4de4c0d86c5cd2643275/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure></p><h3 id="添加主机到集群"><a href="#添加主机到集群" class="headerlink" title="添加主机到集群"></a>添加主机到集群</h3><p>在<code>master</code>安装完成之后，既可以将其他主机加入到集群中，具体的命令如下：<br><code>kubeadm join --token &lt;token&gt; &lt;master-ip&gt;:&lt;master-port&gt; --discovery-token-ca-cert-hash sha256:&lt;hash&gt;</code></p><p>具体连接<a href="https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/#join-nodes" target="_blank" rel="noopener">参见</a>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join 10.196.50.212:6443 --token t38ktj.cskldrxzvpdkk7ak --discovery-token-ca-cert-hash sha256:338272a82bf284f871584090ce89e3c725e092a67af0e6f4d5b1ed857280977f</span><br></pre></td></tr></table></figure></p><p>If you do not have the token, you can get it by running the following command on the master node:<br><code>kubeadm token list</code></p><p>By default, tokens expire after 24 hours. If you are joining a node to the cluster after the current token has expired, you can create a new token by running the following command on the master node:<br><code>kubeadm token create</code></p><p>If you don’t have the value of –discovery-token-ca-cert-hash, you can get it by running the following command chain on the master node:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | \</span><br><span class="line">   openssl dgst -sha256 -hex | sed &apos;s/^.* //&apos;</span><br></pre></td></tr></table></figure></p><h3 id="k8s其他配置"><a href="#k8s其他配置" class="headerlink" title="k8s其他配置"></a>k8s其他配置</h3><h4 id="Master-Isolation"><a href="#Master-Isolation" class="headerlink" title="Master Isolation"></a>Master Isolation</h4><p>By default, your cluster will not schedule pods on the master for security reasons. To disable it:</p><p><code>kubectl taint nodes --all node-role.kubernetes.io/master-</code></p><p>output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node &quot;test-01&quot; untainted</span><br><span class="line">taint &quot;node-role.kubernetes.io/master:&quot; not found</span><br><span class="line">taint &quot;node-role.kubernetes.io/master:&quot; not found</span><br></pre></td></tr></table></figure></p><h4 id="k8s-删除主机"><a href="#k8s-删除主机" class="headerlink" title="k8s 删除主机"></a>k8s 删除主机</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl drain --delete-local-data --force --ignore-daemonsets &lt;node name&gt;</span><br><span class="line">kubectl delete node &lt;node name&gt;</span><br></pre></td></tr></table></figure><h3 id="管理GPU"><a href="#管理GPU" class="headerlink" title="管理GPU"></a>管理GPU</h3><p>k8s支持NVIDIA和AMD GPU的调度，参见<a href="https://kubernetes.io/docs/tasks/manage-gpus/scheduling-gpus" target="_blank" rel="noopener">文档</a>，</p><p>首先需要满足以下条件：</p><ul><li>Kubernetes nodes have to be pre-installed with NVIDIA drivers.</li><li>NVIDIA drivers &gt;= 361.93</li><li>Kubernetes nodes have to be pre-installed with <a href="https://github.com/NVIDIA/nvidia-docker" target="_blank" rel="noopener">nvidia-docker 2.0</a></li><li><a href="https://github.com/nvidia/nvidia-container-runtime" target="_blank" rel="noopener">nvidia-container-runtime</a> must be configured as the default runtime for docker instead of runc.</li></ul><p>然后安装nvidia官方提供的<a href="https://github.com/NVIDIA/k8s-device-plugin" target="_blank" rel="noopener">k8s插件</a>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f https://raw.githubusercontent.com/NVIDIA/k8s-device-plugin/v1.11/nvidia-device-plugin.yml</span><br></pre></td></tr></table></figure><p>安装完成之后就可以检测到GPU了：<br><code>kubectl describe nodes | grep -B 3 gpu</code> outputs:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl describe nodes | grep -B 3 gpu</span><br><span class="line"> hugepages-1Gi:                  0</span><br><span class="line"> hugepages-2Mi:                  0</span><br><span class="line"> memory:                         16367236Ki</span><br><span class="line"> nvidia.com/gpu:                 2</span><br><span class="line">--</span><br><span class="line"> hugepages-1Gi:                  0</span><br><span class="line"> hugepages-2Mi:                  0</span><br><span class="line"> memory:                         16264836Ki</span><br><span class="line"> nvidia.com/gpu:                 2</span><br><span class="line">--</span><br><span class="line">  cpu                            850m (10%)  100m (1%)</span><br><span class="line">  memory                         190Mi (1%)  390Mi (2%)</span><br><span class="line">  attachable-volumes-azure-disk  0           0</span><br><span class="line">  nvidia.com/gpu                 0           0</span><br></pre></td></tr></table></figure><p>Label your nodes with the accelerator type they have:<br><code>kubectl label nodes &lt;node-with-p100&gt; accelerator=nvidia-tesla-p100</code><br>example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl label nodes zs accelerator=nvidia-gtx1080ti</span><br><span class="line">node/zs labeled</span><br><span class="line">$ kubectl label nodes dt-node1 accelerator=nvidia-gtx1080</span><br><span class="line">node/dt-node1 labeled</span><br></pre></td></tr></table></figure></p><p>最后就可以在配置文件中申请GPU：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: gpu-pod</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    - name: cuda-container</span><br><span class="line">      image: nvidia/cuda:9.0-devel</span><br><span class="line">      resources:</span><br><span class="line">        limits:</span><br><span class="line">          nvidia.com/gpu: 2 # requesting 2 GPUs</span><br><span class="line">    - name: digits-container</span><br><span class="line">      image: nvidia/digits:6.0</span><br><span class="line">      resources:</span><br><span class="line">        limits:</span><br><span class="line">          nvidia.com/gpu: 2 # requesting 2 GPUs</span><br></pre></td></tr></table></figure><p>nvidia详细的安装、配置、可视化在k8s gpu的文档</p><ul><li><a href="https://developer.nvidia.com/kubernetes-gpu" target="_blank" rel="noopener">https://developer.nvidia.com/kubernetes-gpu</a></li><li><a href="https://docs.nvidia.com/datacenter/kubernetes-install-guide/index.html" target="_blank" rel="noopener">https://docs.nvidia.com/datacenter/kubernetes-install-guide/index.html</a></li></ul><h3 id="搭建-k8s-dashboard"><a href="#搭建-k8s-dashboard" class="headerlink" title="搭建 k8s dashboard"></a>搭建 k8s dashboard</h3><p><code>dashbaord</code> 能够有一个前端页面查看、管理当前集群。<br><img src="/assets/img/k8s-dashboard.png" alt=""></p><h4 id="Create-certificate-optional"><a href="#Create-certificate-optional" class="headerlink" title="Create certificate(optional)"></a>Create certificate(optional)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir certs &amp;&amp; cd certs/</span><br><span class="line"></span><br><span class="line">openssl genrsa -des3 -passout pass:x -out dashboard.pass.key 2048</span><br><span class="line">openssl rsa -passin pass:x -in dashboard.pass.key -out dashboard.key</span><br><span class="line">rm dashboard.pass.key</span><br><span class="line">openssl req -new -key dashboard.key -out dashboard.csr</span><br><span class="line">openssl x509 -req -sha256 -days 365 -in dashboard.csr -signkey dashboard.key -out dashboard.crt</span><br></pre></td></tr></table></figure><p>lists certs:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ll</span><br><span class="line">-rw-rw-r-- 1 zs zs 1.1K Oct 24 13:36 dashboard.crt</span><br><span class="line">-rw-rw-r-- 1 zs zs  956 Oct 24 13:36 dashboard.csr</span><br><span class="line">-rw-rw-r-- 1 zs zs 1.7K Oct 24 13:30 dashboard.key</span><br></pre></td></tr></table></figure></p><p>generate secret:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create secret generic kubernetes-dashboard-certs --from-file=. -n kube-system</span><br><span class="line">secret/kubernetes-dashboard-certs created</span><br></pre></td></tr></table></figure></p><h4 id="download-image"><a href="#download-image" class="headerlink" title="download image"></a>download image</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.10.0</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.10.0 k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/heapster-amd64:v1.5.4</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/heapster-amd64:v1.5.4 k8s.gcr.io/heapster-amd64:v1.5.4</span><br><span class="line"></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/heapster-influxdb-amd64:v1.5.2</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/heapster-influxdb-amd64:v1.5.2 k8s.gcr.io/heapster-influxdb-amd64:v1.5.2</span><br></pre></td></tr></table></figure><h4 id="Install-kubernetes-dashboard-service"><a href="#Install-kubernetes-dashboard-service" class="headerlink" title="Install kubernetes dashboard service"></a>Install kubernetes dashboard service</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml</span><br></pre></td></tr></table></figure><h4 id="Modify-kubernetes-dashboard-service"><a href="#Modify-kubernetes-dashboard-service" class="headerlink" title="Modify kubernetes dashboard service"></a>Modify kubernetes dashboard service</h4><p>change “ClusterIP” to “NodePort”:<br><code>kubectl -n kube-system edit service kubernetes-dashboard</code></p><h4 id="Check-port-on-which-Dashboard-was-exposed"><a href="#Check-port-on-which-Dashboard-was-exposed" class="headerlink" title="Check port on which Dashboard was exposed"></a>Check port on which Dashboard was exposed</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl -n kube-system get service kubernetes-dashboard</span><br><span class="line">NAME                   TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">kubernetes-dashboard   NodePort   10.111.48.97   &lt;none&gt;        443:30386/TCP   6m31s</span><br></pre></td></tr></table></figure><h4 id="create-user"><a href="#create-user" class="headerlink" title="create user"></a>create user</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create -f developer_account.yaml</span><br><span class="line">serviceaccount/master-admin created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/master-admin created</span><br><span class="line"></span><br><span class="line"># zs @ zs in /apps/workspace/certs [14:44:08]</span><br><span class="line">$ kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep master-admin | awk &apos;&#123;print $1&#125;&apos;)</span><br><span class="line">Name:         master-admin-token-459v8</span><br><span class="line">Namespace:    kube-system</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name: master-admin</span><br><span class="line">              kubernetes.io/service-account.uid: your-uid</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1025 bytes</span><br><span class="line">namespace:  11 bytes</span><br><span class="line">token:      your-token</span><br></pre></td></tr></table></figure><h4 id="dashboard-reference"><a href="#dashboard-reference" class="headerlink" title="dashboard reference"></a>dashboard reference</h4><ul><li><a href="https://github.com/kubernetes/dashboard" target="_blank" rel="noopener">https://github.com/kubernetes/dashboard</a></li><li><a href="https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/</a></li><li><a href="https://docs.aws.amazon.com/eks/latest/userguide/dashboard-tutorial.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/eks/latest/userguide/dashboard-tutorial.html</a></li></ul><h3 id="troubleshot"><a href="#troubleshot" class="headerlink" title="troubleshot"></a>troubleshot</h3><h4 id="dnscore-1-2-2-CrashLoopBackOff"><a href="#dnscore-1-2-2-CrashLoopBackOff" class="headerlink" title="dnscore 1.2.2 CrashLoopBackOff"></a>dnscore 1.2.2 CrashLoopBackOff</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kube-system   coredns-68fb79bcf6-6s5bp                0/1     CrashLoopBackOff   6          10m</span><br><span class="line">kube-system   coredns-68fb79bcf6-hckxq                0/1     CrashLoopBackOff   6          10m</span><br></pre></td></tr></table></figure><p>“replacing proxy . /etc/resolv.conf with the ip address of your upstream DNS, for example proxy . 8.8.8.8.”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl edit cm coredns -n kube-system</span><br><span class="line"></span><br><span class="line">kubectl get pods -n kube-system -oname |grep coredns |xargs kubectl delete -n kube-system</span><br></pre></td></tr></table></figure></p><p><a href="https://stackoverflow.com/a/52911772" target="_blank" rel="noopener">https://stackoverflow.com/a/52911772</a><br><a href="https://coredns.io/plugins/loop/#troubleshooting" target="_blank" rel="noopener">https://coredns.io/plugins/loop/#troubleshooting</a></p><h4 id="network-failed-to-set-bridge-addr-“cni0”-already-has-an-IP-address-different-from-10-244-0-1-24"><a href="#network-failed-to-set-bridge-addr-“cni0”-already-has-an-IP-address-different-from-10-244-0-1-24" class="headerlink" title="network: failed to set bridge addr: “cni0” already has an IP address different from 10.244.0.1/24"></a>network: failed to set bridge addr: “cni0” already has an IP address different from 10.244.0.1/24</h4><p><a href="https://github.com/kubernetes/kubernetes/issues/57280#issuecomment-356431256" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/issues/57280#issuecomment-356431256</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kubeadm reset</span><br><span class="line">systemctl stop kubelet</span><br><span class="line">systemctl stop docker</span><br><span class="line">rm -rf /var/lib/cni/</span><br><span class="line">rm -rf /var/lib/kubelet/*</span><br><span class="line">rm -rf /etc/cni/</span><br><span class="line">ifconfig cni0 down</span><br><span class="line">ifconfig flannel.1 down</span><br><span class="line">ifconfig docker0 down</span><br><span class="line">ip link delete cni0</span><br><span class="line">ip link delete flannel.1</span><br></pre></td></tr></table></figure><h2 id="references"><a href="#references" class="headerlink" title="references:"></a>references:</h2><ul><li><a href="https://kubernetes.io/docs/setup/independent/install-kubeadm/#check-required-ports" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/independent/install-kubeadm/#check-required-ports</a></li><li><a href="https://unix.stackexchange.com/questions/224156/how-to-safely-turn-off-swap-permanently-and-reclaim-the-space-on-debian-jessie" target="_blank" rel="noopener">https://unix.stackexchange.com/questions/224156/how-to-safely-turn-off-swap-permanently-and-reclaim-the-space-on-debian-jessie</a></li><li><a href="https://blog.csdn.net/u010827484/article/details/83025404" target="_blank" rel="noopener">https://blog.csdn.net/u010827484/article/details/83025404</a></li><li><a href="https://www.bookstack.cn/read/learning-kubernetes/installation-kubeadm.md" target="_blank" rel="noopener">https://www.bookstack.cn/read/learning-kubernetes/installation-kubeadm.md</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当前深度学习模型训练中，还往往采用的是单机多卡的方式，如果主机较多的情况下，每个人单独使用固定的一台或几台服务器，GPU利用率不高，而且，训练需要较大的 batch size(如 densenet)，或者需要在短时间内训练完成，则单机多卡有可能不满足需求。&lt;br&gt;基于kubernetes搭建训练分布式平台，对训练任务容器化，并支持GPU的自动调度。&lt;br&gt;
    
    </summary>
    
      <category term="dev" scheme="http://fulingzhi.com/categories/dev/"/>
    
    
      <category term="docker" scheme="http://fulingzhi.com/tags/docker/"/>
    
      <category term="k8s" scheme="http://fulingzhi.com/tags/k8s/"/>
    
      <category term="deep learning" scheme="http://fulingzhi.com/tags/deep-learning/"/>
    
  </entry>
  
  <entry>
    <title>docker basic usage</title>
    <link href="http://fulingzhi.com/2018/03/09/2018-03-09-docker-basic-usage/"/>
    <id>http://fulingzhi.com/2018/03/09/2018-03-09-docker-basic-usage/</id>
    <published>2018-03-09T14:13:23.000Z</published>
    <updated>2018-10-23T06:23:33.719Z</updated>
    
    <content type="html"><![CDATA[<h3 id="install-docker"><a href="#install-docker" class="headerlink" title="install docker"></a>install docker</h3><p>install with official shell file:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">$ sudo sh get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure></p><p>or you can install docker step by step:<br>official website: <a href="https://docs.docker.com/install/" target="_blank" rel="noopener">https://docs.docker.com/install/</a><br>ubuntu: <a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/ubuntu/</a></p><h3 id="install-nvidia-docker"><a href="#install-nvidia-docker" class="headerlink" title="install nvidia docker"></a>install nvidia docker</h3><p><a href="https://www.cnblogs.com/dwsun/p/7833580.html" target="_blank" rel="noopener">https://www.cnblogs.com/dwsun/p/7833580.html</a><br><a href="https://github.com/NVIDIA/nvidia-docker" target="_blank" rel="noopener">https://github.com/NVIDIA/nvidia-docker</a></p><a id="more"></a><p>Ubuntu:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># If you have nvidia-docker 1.0 installed: we need to remove it and all existing GPU containers</span><br><span class="line">docker volume ls -q -f driver=nvidia-docker | xargs -r -I&#123;&#125; -n1 docker ps -q -a -f volume=&#123;&#125; | xargs -r docker rm -f</span><br><span class="line">sudo apt-get purge -y nvidia-docker</span><br><span class="line"></span><br><span class="line"># Add the package repositories</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -</span><br><span class="line">distribution=$(. /etc/os-release;echo $ID$VERSION_ID)</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"># Install nvidia-docker2 and reload the Docker daemon configuration</span><br><span class="line">sudo apt-get install -y nvidia-docker2</span><br><span class="line">sudo pkill -SIGHUP dockerd</span><br><span class="line"></span><br><span class="line"># Test nvidia-smi with the latest official CUDA image</span><br><span class="line">docker run --runtime=nvidia --rm nvidia/cuda nvidia-smi</span><br></pre></td></tr></table></figure></p><h3 id="install-docker-runtime"><a href="#install-docker-runtime" class="headerlink" title="install docker runtime"></a>install docker runtime</h3><p><a href="https://github.com/nvidia/nvidia-container-runtime#installation" target="_blank" rel="noopener">https://github.com/nvidia/nvidia-container-runtime#installation</a></p><p><code>sudo apt-get install nvidia-container-runtime</code></p><p>add docker nvidia runtime<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;graph&quot;: &quot;/apps/docker&quot;,</span><br><span class="line">    &quot;registry-mirrors&quot;: [&quot;https://hash-code.mirror.aliyuncs.com&quot;],</span><br><span class="line">    &quot;default-runtime&quot;: &quot;nvidia&quot;,</span><br><span class="line">    &quot;runtimes&quot;: &#123;</span><br><span class="line">        &quot;nvidia&quot;: &#123;</span><br><span class="line">            &quot;path&quot;: &quot;/usr/bin/nvidia-container-runtime&quot;,</span><br><span class="line">            &quot;runtimeArgs&quot;: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p>“registry-mirrors”: [“<a href="http://your-aliyun.mirror.aliyuncs.com" target="_blank" rel="noopener">http://your-aliyun.mirror.aliyuncs.com</a>“]</p><p>restart the docker daemon<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pkill -SIGHUP dockerd</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></p><h3 id="docker-registor"><a href="#docker-registor" class="headerlink" title="docker registor"></a>docker registor</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d \</span><br><span class="line">  -p 5000:5000 \</span><br><span class="line">  --restart=always \</span><br><span class="line">  --name registry \</span><br><span class="line">  -v /mnt/registry:/var/lib/registry \</span><br><span class="line">  registry:2</span><br></pre></td></tr></table></figure><p><a href="http://blog.csdn.net/ronnyjiang/article/details/71189392" target="_blank" rel="noopener">http://blog.csdn.net/ronnyjiang/article/details/71189392</a><br><a href="https://docs.docker.com/registry/deploying/" target="_blank" rel="noopener">https://docs.docker.com/registry/deploying/</a></p><h3 id="docker-rm"><a href="#docker-rm" class="headerlink" title="docker rm"></a>docker rm</h3><p>We can review the containers on your system with <code>docker ps</code>. Adding the <code>-a</code> flag will show all containers. When you’re sure you want to delete them, you can add the <code>-q</code> flag to supply the IDs to the docker stop and docker rm commands:</p><p>List all exited containers:<br><code>docker ps -aq -f status=exited</code><br>remove all exited containers:<br><code>docker ps -aq -f status=exited | xargs docker rm</code></p><p>Remove stopped containers:<br><code>docker ps -aq --no-trunc | xargs docker rm</code></p><p>Remove containers created after a specific container:<br><code>docker images -q --filter dangling=true | xargs docker rmi</code></p><p>Remove containers created before a specific container:<br><code>docker ps --before a1bz3768ez7g -q | xargs docker rm</code></p><p>Use <code>--rm</code> together with <code>docker build</code> to remove intermediary images during the build process.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Remove unused images</span><br><span class="line">docker image prune</span><br><span class="line"></span><br><span class="line"># Remove stopped containers.</span><br><span class="line">docker container prune</span><br><span class="line"></span><br><span class="line"># Remove unused volumes</span><br><span class="line">docker volume prune</span><br><span class="line"></span><br><span class="line"># Remove unused networks</span><br><span class="line">docker network prune</span><br><span class="line"></span><br><span class="line"># Command to run all prunes:</span><br><span class="line">docker system prune</span><br></pre></td></tr></table></figure><h3 id="docker-tag"><a href="#docker-tag" class="headerlink" title="docker tag"></a>docker tag</h3><p><code>docker tag mxnet-cu80/python:1.1.0-dev mxnet-cu90/python:1.2.0-dev</code></p><h3 id="docker-save-amp-load"><a href="#docker-save-amp-load" class="headerlink" title="docker save &amp; load"></a>docker save &amp; load</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker save busybox &gt; busybox.tar</span><br><span class="line">docker save --output busybox.tar busybox</span><br><span class="line">docker save -o mxnet-ssd-cpu.tar mxnet-ssd-bike:v0.1.1-dev</span><br><span class="line"></span><br><span class="line">docker load &lt; mxnet-ssd-cpu.tar</span><br><span class="line">docker load --input mxnet-ssd-cpu.tar</span><br></pre></td></tr></table></figure><p><a href="https://docs.docker.com/engine/reference/commandline/save" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/commandline/save</a><br><a href="https://docs.docker.com/engine/reference/commandline/load" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/commandline/load</a></p><h3 id="docker-commit"><a href="#docker-commit" class="headerlink" title="docker commit"></a>docker commit</h3><p><code>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</code></p><p>-a :提交的镜像作者；<br>-c :使用Dockerfile指令来创建镜像；<br>-m :提交时的说明文字；<br>-p :在commit时，将容器暂停。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ docker images mxnet-cu90/python:1.2.0-roialign</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mxnet-cu90/python   1.2.0-roialign      ff82b60fdcd1        4 days ago          5.36GB</span><br><span class="line"></span><br><span class="line">$ docker ps | grep mxnet-cu90</span><br><span class="line">ba77f4f31eae        mxnet-cu90/python:1.2.0-roialign</span><br><span class="line"></span><br><span class="line">docker commit -a &quot;lingzhi.me&quot; -m &quot;update python dev&quot; ba77f4f31eae mxnet-cu90/python:1.2.0-roialign</span><br><span class="line"></span><br><span class="line">docker images mxnet-cu90/python:1.2.0-roialign</span><br><span class="line">$ docker images mxnet-cu90/python:1.2.0-roialign</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mxnet-cu90/python   1.2.0-roialign      dce634b0c63f        15 seconds ago      5.38GB</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;install-docker&quot;&gt;&lt;a href=&quot;#install-docker&quot; class=&quot;headerlink&quot; title=&quot;install docker&quot;&gt;&lt;/a&gt;install docker&lt;/h3&gt;&lt;p&gt;install with official shell file:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl -fsSL get.docker.com -o get-docker.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo sh get-docker.sh --mirror Aliyun&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;or you can install docker step by step:&lt;br&gt;official website: &lt;a href=&quot;https://docs.docker.com/install/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.docker.com/install/&lt;/a&gt;&lt;br&gt;ubuntu: &lt;a href=&quot;https://docs.docker.com/install/linux/docker-ce/ubuntu/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.docker.com/install/linux/docker-ce/ubuntu/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;install-nvidia-docker&quot;&gt;&lt;a href=&quot;#install-nvidia-docker&quot; class=&quot;headerlink&quot; title=&quot;install nvidia docker&quot;&gt;&lt;/a&gt;install nvidia docker&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/dwsun/p/7833580.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/dwsun/p/7833580.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/NVIDIA/nvidia-docker&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/NVIDIA/nvidia-docker&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="dev" scheme="http://fulingzhi.com/categories/dev/"/>
    
    
      <category term="docker" scheme="http://fulingzhi.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>frequently-used commands on ubuntu</title>
    <link href="http://fulingzhi.com/2014/01/23/2018-03-01-frequently-used-commands-on-ubuntu/"/>
    <id>http://fulingzhi.com/2014/01/23/2018-03-01-frequently-used-commands-on-ubuntu/</id>
    <published>2014-01-23T13:07:30.000Z</published>
    <updated>2018-10-26T08:01:27.247Z</updated>
    
    <content type="html"><![CDATA[<h3 id="imagemagic"><a href="#imagemagic" class="headerlink" title="imagemagic"></a>imagemagic</h3><p>install imagemagic: <code>apt-get install imagemagick</code></p><p>查询对应图片的信息 <code>identify logo.jpg</code></p><p>缩放图像 <code>convert -resize 20%x20% test.JPG test-small.png</code></p><a id="more"></a><h3 id="查看磁盘使用"><a href="#查看磁盘使用" class="headerlink" title="查看磁盘使用"></a>查看磁盘使用</h3><p><code>df -lh</code></p><h3 id="查看磁盘挂载情况"><a href="#查看磁盘挂载情况" class="headerlink" title="查看磁盘挂载情况"></a>查看磁盘挂载情况</h3><p><code>fdisk -l</code></p><h3 id="查看占用端口"><a href="#查看占用端口" class="headerlink" title="查看占用端口"></a>查看占用端口</h3><p>netstat -apn|grep 80</p><p>lsof -i:21</p><h3 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h3><p>extract files<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar xzf file.tar.gz</span><br><span class="line">tar xjf file.tar.bz2</span><br></pre></td></tr></table></figure></p><p>备份系统：<br><code>tar -cvpzf /os_backup/ubuntu14_ver0.1.tar.gz --exclude=os_backup --exclude=proc --exclude=tmp --exclude=mnt --exclude=sys --exclude=lost+found / &gt; /dev/null</code><br>‘tar’ 是用来备份的程序<br>c - 新建一个备份文档<br>v - 详细模式， tar程序将在屏幕上实时输出所有信息。<br>p - 保存许可，并应用到所有文件。<br>z - 采用‘gzip’压缩备份文件，以减小备份文件体积。<br>f - 说明备份文件存放的路径， Ubuntu.tgz 是本例子中备份文件名。<br>“/”是我们要备份的目录，在这里是整个文件系统。</p><p>还原系统：<br><code>tar -xvpzf /os_backup/ubuntu14_ver0.1.tar.gz -C /your-dir</code><br>-C 参数是指定tar程序解压缩到的目录。</p><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p>打开终端 <code>useradd -m david</code><br>创建 <code>david</code> 用户, 且创建 home目录</p><p>设置用户密码 <code>passwd david</code></p><p>添加到sudo组 <code>usermod -a -G sudo david</code><br>-a 添加  -G添加到组</p><p>修改bash<br><code>sudo chsh /bin/bash david</code></p><p><a href="http://jingyan.baidu.com/article/5d368d1ef58ed43f60c05727.html" target="_blank" rel="noopener">http://jingyan.baidu.com/article/5d368d1ef58ed43f60c05727.html</a><br><a href="http://www.cnblogs.com/daizhuacai/archive/2013/01/17/2865132.html" target="_blank" rel="noopener">http://www.cnblogs.com/daizhuacai/archive/2013/01/17/2865132.html</a></p><h3 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h3><p>scp 本地用户名 @IP 地址 : 文件名 1 远程用户名 @IP 地址 : 文件名 2</p><p>[ 本地用户名 @IP 地址 :] 可以不输入 , 可能需要输入远程用户名所对应的密码 .</p><p>可能有用的几个参数 :</p><p>-v 和大多数 linux 命令中的 -v 意思一样 , 用来显示进度 . 可以用来查看连接 , 认证 , 或是配置错误 .</p><p>-C 使能压缩选项 .</p><p>-P 选择端口 . 注意 -p 已经被 rcp 使用 .</p><p>-4 强行使用 IPV4 地址 .</p><p>-6 强行使用 IPV6 地址 .</p><h3 id="cpu-kernels"><a href="#cpu-kernels" class="headerlink" title="cpu kernels"></a>cpu kernels</h3><p><a href="http://blog.csdn.net/cbmsft/article/details/7219370" target="_blank" rel="noopener">http://blog.csdn.net/cbmsft/article/details/7219370</a><br><a href="http://www.cnblogs.com/emanlee/p/3587571.html" target="_blank" rel="noopener">http://www.cnblogs.com/emanlee/p/3587571.html</a></p><p>1.具有相同core id的cpu是同一个core的超线程。<br>2.具有相同physical id的cpu是同一颗cpu封装的线程或者cores。<br>英文版：<br>1.Physical id and core id are not necessarily consecutive but they are unique. Any cpu with the same core id are hyperthreads in the same core.<br>2.Any cpu with the same physical id are threads or cores in the same physical socket.</p><p>总核数 = 物理CPU个数 X 每颗物理CPU的核数<br>总逻辑CPU数 = 物理CPU个数 X 每颗物理CPU的核数 X 超线程数</p><p>查看物理CPU个数<br><code>cat /proc/cpuinfo| grep &quot;physical id&quot;| sort| uniq| wc -l</code> :</p><p>查看每个物理CPU中core的个数(即核数)<br><code>cat /proc/cpuinfo| grep &quot;cpu cores&quot;| uniq</code> :</p><p>查看逻辑CPU的个数<br><code>cat /proc/cpuinfo| grep &quot;processor&quot;| wc -l</code> :</p><p>查看当前操作系统内核信息<br><code>uname -a</code> :<br>Linux redcat 2.6.31-20-generic #58-Ubuntu SMP Fri Mar 12 05:23:09 UTC 2010 i686 GNU/Linux</p><p>查看当前操作系统发行版信息</p><p>#cat /etc/issue<br>Ubuntu 9.10 \n \l</p><p>查看cpu型号<br><code>cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c</code> :<br>2  Intel(R) Core(TM)2 Duo CPU     P8600  @ 2.40GHz<br>(看到有2个逻辑CPU, 也知道了CPU型号)</p><p>查看物理cpu颗数<br><code>cat /proc/cpuinfo | grep physical | uniq -c</code><br>2 physical id    : 0<br>(说明实际上是1颗2核的CPU)</p><p>查看cpu运行模式<br><code>getconf LONG_BIT</code><br>32<br>(说明当前CPU运行在32bit模式下, 但不代表CPU不支持64bit)</p><p>查看cpu是否支持64bit<br><code>cat /proc/cpuinfo | grep flags | grep &#39; lm &#39; | wc -l</code> :<br>2<br>(结果大于0, 说明支持64bit计算. lm指long mode, 支持lm则是64bit)</p><p>查看cpu信息概要（昨天看aix的时候刚发现的，在ubuntu上竟然也有~）:</p><p>#lscpu</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Architecture:          i686                            #架构686</span><br><span class="line">CPU(s):                2                                   #逻辑cpu颗数是2</span><br><span class="line">Thread(s) per core:    1                           #每个核心线程数是1</span><br><span class="line">Core(s) per socket:    2                           #每个cpu插槽核数/每颗物理cpu核数是2</span><br><span class="line">CPU socket(s):         1                            #cpu插槽数是1</span><br><span class="line">Vendor ID:             GenuineIntel           #cpu厂商ID是GenuineIntel</span><br><span class="line">CPU family:            6                              #cpu系列是6</span><br><span class="line">Model:                 23                                #型号23</span><br><span class="line">Stepping:              10                              #步进是10</span><br><span class="line">CPU MHz:               800.000                 #cpu主频是800MHz</span><br><span class="line">Virtualization:        VT-x                         #cpu支持的虚拟化技术VT-x(对此在下一博文中解释下http://hi.baidu.com/sdusoul/blog/item/5d8e0488def3a998a5c272c0.html)</span><br><span class="line">L1d cache:             32K                         #一级缓存32K（google了下，这具体表示表示cpu的L1数据缓存为32k）</span><br><span class="line">L1i cache:             32K                          #一级缓存32K（具体为L1指令缓存为32K）</span><br><span class="line">L2 cache:              3072K                      #二级缓存3072K</span><br></pre></td></tr></table></figure><h3 id="locale"><a href="#locale" class="headerlink" title="locale"></a>locale</h3><p><a href="http://my.oschina.net/u/943306/blog/345923" target="_blank" rel="noopener">http://my.oschina.net/u/943306/blog/345923</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">perl: warning: Setting locale failed.</span><br><span class="line">perl: warning: Please check that your locale settings:</span><br><span class="line">        LANGUAGE = (unset),</span><br><span class="line">        LC_ALL = (unset),</span><br><span class="line">        LC_TIME = &quot;zh_CN.UTF-8&quot;,</span><br><span class="line">        LC_MONETARY = &quot;zh_CN.UTF-8&quot;,</span><br><span class="line">        LC_CTYPE = &quot;UTF-8&quot;,</span><br><span class="line">        LC_ADDRESS = &quot;zh_CN.UTF-8&quot;,</span><br><span class="line">        LC_TELEPHONE = &quot;zh_CN.UTF-8&quot;,</span><br><span class="line">        LC_NAME = &quot;zh_CN.UTF-8&quot;,</span><br><span class="line">        LC_MEASUREMENT = &quot;zh_CN.UTF-8&quot;,</span><br><span class="line">        LC_IDENTIFICATION = &quot;zh_CN.UTF-8&quot;,</span><br><span class="line">        LC_NUMERIC = &quot;zh_CN.UTF-8&quot;,</span><br><span class="line">        LC_PAPER = &quot;zh_CN.UTF-8&quot;,</span><br><span class="line">        LANG = &quot;en_US.UTF-8&quot;</span><br><span class="line">    are supported and installed on your system.</span><br><span class="line">perl: warning: Falling back to the standard locale (&quot;C&quot;).</span><br><span class="line">locale: Cannot set LC_CTYPE to default locale: No such file or directory</span><br><span class="line">locale: Cannot set LC_ALL to default locale: No such file or directory</span><br></pre></td></tr></table></figure><p>客户机一般都会设置zh_CN.UTF-8语言，用来显示中文，而远端的vps一般就只有en_US.UTF-8<br>zh_CN.UTF-8一旦带过去就会报找不到的错误，文章开头已经说的很清楚了</p><p>网上还有些解决方法，并不是很靠谱，虽然从表面来看像解决问题了，但其实是把问题影藏了</p><p>比如在远程主机上的/etc/ssh/sshd<em>config文件里，将AcceptEnv LANG LC</em>*这行注释掉<br>然后重启远程的sshd，然后退出远程后，重新ssh上来。<br>这时，远程主机不会把客户机的语言环境（zh_CN.UTF-8）带过来<br>当然就不会再有报错，可惜的是，远程主机是无法正确显示中文的，问题还在，只是被影藏了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export LANGUAGE=en_US.UTF-8</span><br><span class="line">export LANG=en_US.UTF-8</span><br><span class="line">export LC_ALL=en_US.UTF-8</span><br><span class="line">locale-gen en_US.UTF-8</span><br><span class="line">dpkg-reconfigure locales</span><br></pre></td></tr></table></figure><p>check locale : <code>perl -e exit</code></p><h3 id="批量修改文件"><a href="#批量修改文件" class="headerlink" title="批量修改文件"></a>批量修改文件</h3><p>Usage：rename [-v] [-n] [-f] perlexpr [filenames]</p><p>-v(verbose)打印被成功重命名的文件<br>-n(no-act)只显示将被重命名的文件，而非实际进行重命名操作<br>-f(force)覆盖已经存在的文件<br>perlexprPerl语言格式的正则表达式<br>files需要被替换的文件(比如<em>.c、</em>.h)，如果没给出文件名，将从标准输入读</p><p><code>rename -n &#39;s/[()]//g&#39; *.jpg</code></p><p>解释：<br>-n直接打印结果在终端中而非实际执行<br>引号中是perl的正则表达式，用来匹配和替换，s代表substitution，替换的意思<br>[()]代表匹配[]中的内容<br>//两个斜杠之间是空代表替换为空的内容，相当于删除<br>g代表全部匹配，不加g的话默认只会匹配一个括号</p><p><code>rename -n &#39;s/^/test_/&#39; *.jpg</code></p><p>s-替换<br>^-在文件名称开头加字符<br>test<em>-将名称前面添加上test</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 将所有*.nc文件中Sam3替换成Stm32</span><br><span class="line">rename -v &apos;s/Sam3/Stm32/&apos; *.nc　　/*执行修改，并列出已重命名的文件*/</span><br><span class="line"></span><br><span class="line"># 去掉文件后缀名(比如去掉.bak)</span><br><span class="line">rename &apos;s/\.bak$//&apos; *.bak</span><br><span class="line"></span><br><span class="line"># 将文件名改为小写</span><br><span class="line">rename &apos;y/A-Z/a-z/&apos; *</span><br><span class="line"></span><br><span class="line"># 去掉文件名的空格</span><br><span class="line">rename &apos;s/[ ]+//g&apos; *</span><br><span class="line"></span><br><span class="line"># 文件开头加入字符串(比如jelline)</span><br><span class="line">rename &apos;s/^/jelline/&apos; *</span><br><span class="line"></span><br><span class="line"># 文件末尾加入字符串(比如jelline)</span><br><span class="line">rename &apos;s/$/jelline/&apos; *</span><br></pre></td></tr></table></figure><p>正则表达式中的一些常用模式pattern[2]：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">x? 　匹配 0 次或一次 x 字符串</span><br><span class="line"></span><br><span class="line">x* 　匹配 0 次或多次 x 字符串，但匹配可能的最少次数</span><br><span class="line"></span><br><span class="line">x+ 　匹配 1 次或多次 x 字符串，但匹配可能的最少次数</span><br><span class="line"></span><br><span class="line">.* 　匹配 0 次或一次的任何字符</span><br><span class="line"></span><br><span class="line">.+ 　匹配 1 次或多次的任何字符</span><br><span class="line"></span><br><span class="line">&#123;m&#125;　匹配刚好是 m 个 的指定字符串</span><br><span class="line"></span><br><span class="line">&#123;m,n&#125;匹配在 m个 以上 n个 以下 的指定字符串</span><br><span class="line"></span><br><span class="line">&#123;m,&#125; 匹配 m个 以上 的指定字符串</span><br><span class="line"></span><br><span class="line">[] 　匹配符合 [] 内的字符</span><br><span class="line"></span><br><span class="line">[^]　匹配不符合 [] 内的字符</span><br><span class="line"></span><br><span class="line">[0-9]匹配所有数字字符</span><br><span class="line"></span><br><span class="line">[a-z]匹配所有小写字母字符</span><br><span class="line"></span><br><span class="line">[^0-9]匹配所有非数字字符</span><br><span class="line"></span><br><span class="line">[^a-z]匹配所有非小写字母字符</span><br><span class="line"></span><br><span class="line">^ 　　匹配字符开头的字符</span><br><span class="line"></span><br><span class="line">$ 　　匹配字符结尾的字符</span><br><span class="line"></span><br><span class="line">\d　　匹配一个数字的字符，和 [0-9] 语法一样</span><br><span class="line"></span><br><span class="line">\d+ 　匹配多个数字字符串，和 [0-9]+ 语法一样</span><br><span class="line"></span><br><span class="line">\D　　非数字，其他同 \d</span><br><span class="line"></span><br><span class="line">\D+　 非数字，其他同 \d+</span><br><span class="line"></span><br><span class="line">\w 　 英文字母或数字的字符串，和 [a-zA-Z0-9] 语法一样</span><br><span class="line"></span><br><span class="line">\w+ 　和 [a-zA-Z0-9]+ 语法一样</span><br><span class="line"></span><br><span class="line">\W 　 非英文字母或数字的字符串，和 [^a-zA-Z0-9] 语法一样</span><br><span class="line"></span><br><span class="line">\W+   和 [^a-zA-Z0-9]+ 语法一样</span><br><span class="line"></span><br><span class="line">\s    空格，和 [\n\t\r\f] 语法一样</span><br><span class="line"></span><br><span class="line">\s+   和 [\n\t\r\f]+ 一样</span><br><span class="line"></span><br><span class="line">\S    非空格，和 [^\n\t\r\f] 语法一样</span><br><span class="line"></span><br><span class="line">\S+   和 [^\n\t\r\f]+ 语法一样</span><br><span class="line"></span><br><span class="line">\b    匹配以英文字母,数字为边界的字符串</span><br><span class="line"></span><br><span class="line">\B    匹配不以英文字母,数值为边界的字符串</span><br><span class="line"></span><br><span class="line">a|b|c 匹配符合a字符 或是b字符 或是c字符 的字符串</span><br><span class="line"></span><br><span class="line">abc   匹配含有 abc 的字符串</span><br></pre></td></tr></table></figure><h3 id="initramfs-tools"><a href="#initramfs-tools" class="headerlink" title="initramfs-tools"></a>initramfs-tools</h3><p>在处理时有错误发生：<br> initramfs-tools<br>E: Sub-process /usr/bin/dpkg returned an error code (1)<br>dpkg –get-selections|grep linux 查看所有安装的内核，并把带 install 的卸载掉<br>sudo apt-get remove linux-image-2.6.24-16-generic</p><p>dpkg –get-selections|grep linux<br>sudo apt-get remove linux-image-4.15.0-20-generic</p><h3 id="umount-target-is-busyl"><a href="#umount-target-is-busyl" class="headerlink" title="umount: target is busyl"></a>umount: target is busyl</h3><p>fuser -m -v -i -k /dev/sdb1</p><h3 id="format-sd-card-mac"><a href="#format-sd-card-mac" class="headerlink" title="format sd card(mac)"></a>format sd card(mac)</h3><p><code>sudo diskutil eraseDisk FAT32 RASPBIAN MBRFormat /dev/disk2</code></p><p><a href="https://www.raspberrypi.org/documentation/installation/installing-images/mac.md" target="_blank" rel="noopener">https://www.raspberrypi.org/documentation/installation/installing-images/mac.md</a></p><h3 id="remove-apt-key"><a href="#remove-apt-key" class="headerlink" title="remove apt-key"></a>remove apt-key</h3><p><a href="https://askubuntu.com/questions/604988/how-to-remove-a-apt-key-which-i-have-added" target="_blank" rel="noopener">https://askubuntu.com/questions/604988/how-to-remove-a-apt-key-which-i-have-added</a></p><p>sudo apt-key list | grep ‘Gluster’<br>sudo apt-key del 6A7BD8D4</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;imagemagic&quot;&gt;&lt;a href=&quot;#imagemagic&quot; class=&quot;headerlink&quot; title=&quot;imagemagic&quot;&gt;&lt;/a&gt;imagemagic&lt;/h3&gt;&lt;p&gt;install imagemagic: &lt;code&gt;apt-get install imagemagick&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查询对应图片的信息 &lt;code&gt;identify logo.jpg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;缩放图像 &lt;code&gt;convert -resize 20%x20% test.JPG test-small.png&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="dev" scheme="http://fulingzhi.com/categories/dev/"/>
    
    
  </entry>
  
  <entry>
    <title>我和那些年</title>
    <link href="http://fulingzhi.com/2012/05/01/2014-02-07-wo-he-na-xie-nian/"/>
    <id>http://fulingzhi.com/2012/05/01/2014-02-07-wo-he-na-xie-nian/</id>
    <published>2012-04-30T16:35:35.000Z</published>
    <updated>2018-03-16T19:02:38.549Z</updated>
    
    <content type="html"><![CDATA[<p>忘了哪一天，我打开迅雷，看到右上角图标一张图片，我觉得感觉很好，一如既往的台湾青春片的风格，像极了《艋舺》的剧照，我抱着好奇的心情点击了图标，发现并不能看，只是有预告片，然后发现网上大部分都是小说，猛然发现有方文山做的序，于是兴趣大增，立马下了在手机上面看了。很快就看完了，觉得不错，丝毫没想到以后还会再去看一遍电影，也没有想到这部电影会在以后火的一塌糊涂。那些年，我们一起追的女孩 似乎已经引发了当下的一种思潮，或者勾起了一代人青春年代的集体回忆。空间动态时常会有各种各样的感慨，有的是自己写的，有的是转的，有的看起来时自己写的，一看才知道是转的。</p><a id="more"></a><p>不得不说，九把刀很有勇气。世界上很有很多人很会讲故事，但他们不一定能勇敢的直白的不假思索的讲述自己的故事。勇敢的九把刀，正如小说里面那个勇敢的拿起原子笔对着墙壁自说自话的柯景腾。坦白的面对自己比裸奔更需要勇气。一场少年时期与暗恋的女孩经历了种种纠结之后，却因为一场荒妙又热血的怪比赛，在他们在爱情的路上分道扬镳，就像两条铁轨在经历了短暂的相聚之后随即分开，渐行渐远。男主角感叹道，恋爱中最悲剧的莫过于女孩要比男孩成熟，而且有时候成熟不是一点点。这种感想像极了那句：“从前有个人在我面前，我没有珍惜，失去了才后悔莫及，人世间最痛苦的事情莫过于此。”</p><p>其实在我看来，沈嘉怡在质疑柯景腾举办格斗比赛时候，关心的是柯景腾的身体，是对他的着想和体贴，而柯景腾却把这个当做在女方面前的一种炫耀，更重要的是一种证明，而这种证明被否定之后，就像泄了气的皮球一样，没有勇气去面对剩下的未来，只能暗暗的说，我没办法继续追你了。原来，热血的冷却，信念的丧失，只是一瞬间的事情。</p><p>其实电影中没有出现小华这个人物，就是柯景腾在喜欢沈嘉怡之前喜欢的一个女生。算是一个小小的插曲。在寺庙里面打坐时候，闻臭袜子，恐吓不听话的小孩子的情节也没有写进去，取而代之是一些比较引起争议的搞笑情节。沈佳仪的扮演者其实早就已经到了生孩子的年纪。因为娇小的身材被柴智屏选中，不得不说，却是完美的演绎了小说中的沈佳仪。</p><p>小说中让我觉得最搞笑的一段是发生在他们打麻将的时候：</p><p>  “妈的，这就跟打麻将一样。”阿和狂拍大腿猛笑，做了以下批注：“我最早听牌，科腾则是硬要过河等自摸，廖英宏则终于胡了牌，可仔细一看，却是个咋胡！”</p><p>我当时看到这段真的笑喷了，而这段在电影却是出现在女主角结婚典礼上面的。<br>小说和电影最打动人的是九把刀的热血和坦诚。将他那段最珍贵最美好的记忆拿出来无私的分享。所以电影无可厚非的省略掉了小华，而毫不吝啬的把镜头对准了他的那群陪他度过青春岁月的玩伴。我想，这才是真正感到我们的地方，谁没有单纯的童年时光呢。与其怀恋的是追的女孩，不如说是对过往青春的美好追忆，而那追过的女孩，则是青春的最好注解。</p><p>人生，其实像一条从宽阔的平原走进森林的路。在平原上同伴可以结伴而行，欢乐地前推后挤，相濡以沫；一旦进入森林，草丛和荆棘挡路，情形就变了，个人专心走个人的路，寻找各人的方向。那推推挤挤同唱同乐的群体情感，那无忧无虑无猜忌的同侪深情，在人的一生中也只有少年期拥有。离开这段纯洁而明亮的阶段，路其实可能愈走愈孤独。你将被家庭羁绊，被责任捆绑，被自己的野心套牢，不复再有阳光似的伙伴。到了后来，当你看着茫茫人海和他们各自冷漠的面孔，你会明白自己也其中的一个。</p><p>那些年，未来还遥远没有形状，可以面朝这大海随意畅想明天<br>那些年，我们都还不太懂爱<br>那些年，一块钱可以买到五个游戏机币，冰袋还是一毛钱<br>那些年，夏天无所事事的我们在树下仰望未知的天空<br>那些年，男生和女生之间还可以有若有若无的微妙情愫<br>那些年，我们不会想到以后，”同桌“和”暗恋“竟会成为如此温暖的词汇<br>那些年，杰伦还戴着鸭舌帽，坦言找圈外的女生当女朋友比较好<br>那些年，鸣人，佐助，小樱还是三人小组，卡卡西还看着亲热天堂<br>那些年，姚明还在 叱咤风云。没课的时候打篮球一打就一下午</p><p>电影最让我难以释怀的地方就是他们开始了自己的大学生活而各奔东西的时候，有人拿着被心仪女孩签名的篮球，有人在火车上自顾自的表演喝水绝技，两位男女主角在火车轨道前那样轻易的就挥手告别。而那离别之前在海滩上嬉戏仿佛就预示着他们豆蔻年华的华丽谢幕。所以，若干年后，你是否还会记起同桌的你，你是否还能细数某死党的种种罪过，谈谈当时的喜欢 和暗恋，是感叹”而我已经分不清，你是友情还是错过的爱情“，还是淡淡的唱起，我们就这样，散落到天涯。<br>当我在洗衣服时想起一些事情的时候，顿时明白，那些年，我们一起追的女孩。重点并不是，<strong>追的女孩</strong>，而是</p><p><strong>那些年，我们一起</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;忘了哪一天，我打开迅雷，看到右上角图标一张图片，我觉得感觉很好，一如既往的台湾青春片的风格，像极了《艋舺》的剧照，我抱着好奇的心情点击了图标，发现并不能看，只是有预告片，然后发现网上大部分都是小说，猛然发现有方文山做的序，于是兴趣大增，立马下了在手机上面看了。很快就看完了，觉得不错，丝毫没想到以后还会再去看一遍电影，也没有想到这部电影会在以后火的一塌糊涂。那些年，我们一起追的女孩 似乎已经引发了当下的一种思潮，或者勾起了一代人青春年代的集体回忆。空间动态时常会有各种各样的感慨，有的是自己写的，有的是转的，有的看起来时自己写的，一看才知道是转的。&lt;/p&gt;
    
    </summary>
    
      <category term="prose" scheme="http://fulingzhi.com/categories/prose/"/>
    
    
      <category term="杂文" scheme="http://fulingzhi.com/tags/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>我所知的大学</title>
    <link href="http://fulingzhi.com/2012/02/14/2014-02-07-wo-suo-zhi-de-da-xue/"/>
    <id>http://fulingzhi.com/2012/02/14/2014-02-07-wo-suo-zhi-de-da-xue/</id>
    <published>2012-02-13T16:50:12.000Z</published>
    <updated>2018-03-16T18:09:54.763Z</updated>
    
    <content type="html"><![CDATA[<p>想好像很久没写日志了。我已经大三了。已经从一个懵懂很傻很天真的大一小白成了大三的老兵。高中多少都幻想过大学的美好生活，其实当刚刚入学的激情慢慢淡去之后，大学的生活和枯燥的高中并无差别。《肖申克的救赎》有这样一段话：“监狱里的高墙实在是很有趣。刚入狱的时候，你痛恨周围的高墙；慢慢地，你习惯了生活在其中；最终你会发现自己不得不依靠它而生存。 这就是体制化。”我想这不仅是那个监狱的写照， 更是我们现在当下校园的写照。</p><a id="more"></a><p>我想我们都经历过从宽松的小学到压力骤然增加的初中，想必也经历过惨绝人寰的高考。其中每天五点起床，十二点睡觉，其压力应该和和富士康员工有一拼。我曾讨厌这种教育制度，讨厌学校那一堵围墙把我们关着名为学校的地方。但是到了大学，围墙没有了，我们却被困在了求生的路上。我们发现如果以后我们想要面包，就必须这么下去。考证，任何奖学金，甚至一个入党名额。都成了为以后求职路上做下的一个砝码。美其名曰“适应社会”。</p><p>老湿的视频有一句话：“教育独立与政治之外，只是我们天真的幻想”、 所以， 我想说，我们已经被深深的体制化了。</p><p>“自由之精神，独立之人格” 这句话的意义只是在告诉我们，那个大师辈出的年代，以及那独立创新的精神，已经离我们越来越远了。大学的课堂成了世界上最适合睡觉的场所。因为教室已经被无形中划分成了两个世界。在大学面前，以官治学，行政扩张，权力本位。人事任免权、经费分配权、招生权、学位授予权，学术经费的分配权，学术荣誉和奖励支配权，学术职称的评审权，甚至连大学的校长，（在此我对我们的前校长张文栋先生表达诚挚的敬意）却没有一项能由大学自己说的算。大学的老师为了论文，职称，科技立项而奔波。绝不会有半点时间留给学生。</p><p>大学已经俨然成了消灭童年，消费青春，消磨斗志的人生圈套。很多人却指望玩到最后而被套牢。的确，有人说现在的学者越来越像商人，商人越来越像官员，官员越来越像学者。现在的大学就像融合了这三个要素的染缸。“当整个社会都认为读大学是成才标准，大学却不能提供社会需要的人才，是大学的失败；当孩子要提早告别童年的快乐、父母要牺牲全部积蓄、兄弟要放弃接受教育机会，才能让大学生读上一个找不着未来的大学，则是社会的变态——我们对大学失望，是因为期望过高：我们对它期望过高，只是因为成本昂贵。”</p><p>曾经中国的学生是最有进步精神，最有激情，最自由的一个群体，这个只要你稍微翻阅下历史，从“公车上书”到现在的<strong><em>*</em></strong>，都可以看出这点。而现在我们就像是盲目扩张的流水线上面统一加工粗制滥造的半成品。一代又一代的驯化，让我们成了许知远书中的《那些忧伤的年轻人》，或者可以是“以135度仰望天空的忧伤的小孩子”</p><p>我爸出生的半年前，发生了一件事情，然后知识分子就逐渐消失了，而我出生前的半年之前，发生了一件事情， 然后大学就慢慢变味了。</p><p>曾经有什么大学造富排行榜， 总是引发很多争议。北大生产有多少亿万富翁。这让大多数的大学都难以望其项背。其实也没必要太紧张。北大可以造富数亿元。咱也可以打出“我校造粪数万吨”。历来有视金钱如粪土的一说， 这既能表达出源远流长的中华美德，也可体现养人不倦的扎实办学传统。</p><p>所以，大学就是这么一个地方，让一个对教育已经绝望的人，却又对他产生无比的依赖。但是所以考研对我来说，已经不是完全意义上的考研了。这个欲望贲张的时代，面对两难的选择——是随波逐流，还是保持独立?这个游戏我已经玩了20年了，我想说：“game over”。我问我比我大十岁以上的人，都是要我考研。他们显然奔波多年，思想早已回归主流、一个研究生文凭所能带来的东西他们早就一清二楚。这或许是世故。或许是智慧把。</p><p>而现在正处于校园的我，行走在高楼林立的校园，却没有半点青春激昂的心境，也已经没有了当年“少年不识愁滋味”的热情激情。大学好像成了半个社会，有些潜规则，有些浮躁，有些勾心斗角。却和激情，梦想不怎么沾边。</p><p>我觉得重要的不是考到多少分，那多少奖学金。而是真正沉淀了什么。“当你把大学所学的全部忘掉的时候，剩下的才是大学的真谛”。我想大学真正要的是一种视野的扩展，能力的提升。找到自己想要做的东西，并一直坚持下去。如果没有，就去不停的寻找，寻找，寻找。</p><p>就像五月天唱的：<br> “小时候 只要看天空 枕著白云 就觉得全世界都拥有<br>  长大了 拥有的更多 为何感觉 到越来越匮乏越贫穷”</p><p>我想起小时候，夏天和奶奶一起在家乘凉，用扇子扇风赶蚊子，闲聊着，那灿烂的星空，那一闪闪的萤火虫，都是遥远而美好的记忆。不管有没有研究生这个文凭，充实的内心，美好的期盼，生活的热情才是最重要的。成为一个坦诚，自信，热忱的人，已经很富有了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想好像很久没写日志了。我已经大三了。已经从一个懵懂很傻很天真的大一小白成了大三的老兵。高中多少都幻想过大学的美好生活，其实当刚刚入学的激情慢慢淡去之后，大学的生活和枯燥的高中并无差别。《肖申克的救赎》有这样一段话：“监狱里的高墙实在是很有趣。刚入狱的时候，你痛恨周围的高墙；慢慢地，你习惯了生活在其中；最终你会发现自己不得不依靠它而生存。 这就是体制化。”我想这不仅是那个监狱的写照， 更是我们现在当下校园的写照。&lt;/p&gt;
    
    </summary>
    
      <category term="prose" scheme="http://fulingzhi.com/categories/prose/"/>
    
    
      <category term="杂文" scheme="http://fulingzhi.com/tags/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
</feed>
